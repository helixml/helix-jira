name: JIRA issues
description: ""
avatar: https://logowik.com/content/uploads/images/jira3124.jpg
image: https://www.ibm.com/content/dam/adobe-cms/case-studies/en/case-studies/alinma-bank/static/img1_1600w.component.xl-retina.ts=1716488498778.jpg/content/adobe-cms/us/en/case-studies/alinma-bank-websphere-liberty/jcr:content/root/leadspace_container/leadspace

assistants:
- apis:
  - name: JIRA issue search
    description: Search JIRA issues
    url: ${JIRA_HOSTNAME}
    schema: |
      openapi: 3.0.0
      info:
        title: Jira Cloud REST API
        description: The Jira Cloud REST API
        version: 1.0.0

      paths:
        /rest/api/3/search:
          get:
            summary: Search for issues using JQL (GET)
            description: Searches for issues using JQL.
            operationId: searchForIssuesUsingJql
            parameters:
              - name: jql
                in: query
                description: The JQL that defines the search
                schema:
                  type: string
              - name: startAt
                in: query
                description: The index of the first item to return in the page of results (page offset). The base index is 0.
                schema:
                  type: integer
                  default: 0
              - name: maxResults
                in: query
                description: The maximum number of items to return per page. The default is 50 and the maximum is 100.
                schema:
                  type: integer
                  default: 10
              - name: fields
                in: query
                description: A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list.
                schema:
                  type: array
                  items:
                    type: string
                    default: summary,comment
              - name: expand
                in: query
                description: Use expand to include additional information about issues in the response. This parameter accepts a comma-separated list.
                schema:
                  type: string
            responses:
              '200':
                description: Returned if the request is successful.
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SearchResults'

      components:
        schemas:
          SearchResults:
            type: object
            properties:
              expand:
                type: string
              startAt:
                type: integer
              maxResults:
                type: integer
              total:
                type: integer
              issues:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
          
          Issue:
            type: object
            properties:
              id:
                type: string
              key:
                type: string
              fields:
                $ref: '#/components/schemas/IssueFields'

          IssueFields:
            type: object
            additionalProperties: true
            description: Issue fields are dynamic and depend on the Jira instance configuration
    headers:
      Authorization: Basic ${AUTH_STRING}
    query: {}

    request_prep_template: |
      Your output must be a valid json, without any commentary or additional formatting.

      Examples:

      **User Input:** Get project prj_1234 details
      **OpenAPI schema path:** /projects/{projectId}
      **Verdict:** response should be {"projectId": "prj_1234"}

      **User Input:** List all users with status "active"
      **OpenAPI schema path:** /users/findByStatus
      **OpenAPI schema parameters:** [
        {
          "name": "status",
          "in": "query",
          "description": "Status values that need to be considered for filter",
          "required": true,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["active", "pending", "sold"],
            "default": "available"
          }
        }
      ]
      **Verdict:** response should be:

      ```json
      {
        "status": "active"
      }
      ```

      **Response Format:** Always respond with JSON without any commentary, wrapped in markdown json tags, for example:
      ```json
      {
        "parameterName": "parameterValue",
        "parameterName2": "parameterValue2"
      }
      ```

      ===END EXAMPLES===

      OpenAPI schema:

      {{.Schema}}

      ===END OPENAPI SCHEMA===

      Based on conversation so far, construct a valid JSON object. In cases where user input does not contain information for a query, DO NOT add that specific query parameter to the output. If a user doesn't provide a required parameter, use sensible defaults for required params, and leave optional params out.
      ONLY use search parameters from the user messages above - do NOT use search parameters provided in the examples.

      Examples of how to specify jql:
      - "what issues are there" -> ""
      - "get all issues assigned to me" -> "assignee = currentUser()"
      - "show tickets assigned to Phil Winder" -> "assignee = 'Phil Winder'"


    response_success_template: |
      Present the key information in a concise manner.
      Include relevant details, references, and links if present. Format the summary in Markdown for clarity and readability where appropriate, but don't mention formatting in your response unless it's relevant to the user's query.
      Make sure to NEVER mention technical terms like "APIs, JSON, Request, etc..." and use first person pronoun (say it as if you performed the action)

    response_error_template: |
      As an AI chat assistant, your job is to help the user understand and resolve API error messages.
      When offering solutions, You will clarify without going into unnecessary detail. You must respond in less than 100 words.
      You should commence by saying "An error occurred while trying to process your request ..." also, if you think it's auth error, ask the user to read this doc https://docs.helix.ml/helix/develop/helix-tools/ (format as markdown)

  # Other assistant properties
  #model: mixtral:instruct
  #model: qwen2.5:7b-instruct-q8_0
  model: llama3.1:8b-instruct-q8_0
  name: ""
  description: ""
  avatar: ""
  image: ""
  provider: ""
  type: text
  system_prompt: ""
  rag_source_id: ""
  lora_id: ""
  knowledge: []
  is_actionable_template: ""
  gptscripts: []
  zapier: []

triggers: []

# TODO: pin down API responses
tests:
- name: Test JIRA issue search
  steps:
    - prompt: what issues are there?
      expected_output: A list of 8 issues with brief summaries and/or details.
- name: Assigned to me
  steps:
    - prompt: what issues are assigned to me?
      expected_output: A summary of only the tasks assigned to Luke Marsden.

